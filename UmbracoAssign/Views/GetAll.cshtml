@using Newtonsoft.Json;
@using System.Dynamic;
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@functions{
    dynamic GetProperties(ICollection<IPublishedProperty> props)
    {
        dynamic exObj = new System.Dynamic.ExpandoObject();
        var dictionary = exObj as IDictionary<string, object>;
        foreach (var prop in props)
        {
            var umbracoNodes = prop.Value as List<IPublishedContent>;

            if (umbracoNodes != null)
            {
                var tmpDictionaries = new List<dynamic>();
                foreach(var umbracoNode in umbracoNodes)
                {
                    tmpDictionaries.Add(GetProperties(umbracoNode.Properties));
                }
                dictionary[prop.PropertyTypeAlias] = tmpDictionaries;
                continue;
            }
            dictionary[prop.PropertyTypeAlias] = prop.Value.ToString();
        }
        return dictionary;
    }
}

@* Set empty layout and correct response header *@
@{
    Layout = null;
    Response.ContentType = "application/json";
}

@* Output JSON *@
@Html.Raw(JsonConvert.SerializeObject(GetProperties(Model.Content.Properties),
    Formatting.Indented,
    new JsonSerializerSettings
    {
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    }
))